import "helper.hpp";

import <vulkan/vulkan_core.h>;

import <format>;
import <source_location>;
import <string_view>;

// sourced from 'https://github.dev/KhronosGroup/Vulkan-Samples/' -
// 'framework/common/strings.h'
export namespace vkh
{
#define CASE_STR(x)                                                                      \
	case x: return #x

	inline constexpr std::string_view to_str (VkFormat format) {
		switch (format) {
			CASE_STR (VK_FORMAT_R4G4_UNORM_PACK8);
			CASE_STR (VK_FORMAT_R4G4B4A4_UNORM_PACK16);
			CASE_STR (VK_FORMAT_B4G4R4A4_UNORM_PACK16);
			CASE_STR (VK_FORMAT_R5G6B5_UNORM_PACK16);
			CASE_STR (VK_FORMAT_B5G6R5_UNORM_PACK16);
			CASE_STR (VK_FORMAT_R5G5B5A1_UNORM_PACK16);
			CASE_STR (VK_FORMAT_B5G5R5A1_UNORM_PACK16);
			CASE_STR (VK_FORMAT_A1R5G5B5_UNORM_PACK16);
			CASE_STR (VK_FORMAT_R8_UNORM);
			CASE_STR (VK_FORMAT_R8_SNORM);
			CASE_STR (VK_FORMAT_R8_USCALED);
			CASE_STR (VK_FORMAT_R8_SSCALED);
			CASE_STR (VK_FORMAT_R8_UINT);
			CASE_STR (VK_FORMAT_R8_SINT);
			CASE_STR (VK_FORMAT_R8_SRGB);
			CASE_STR (VK_FORMAT_R8G8_UNORM);
			CASE_STR (VK_FORMAT_R8G8_SNORM);
			CASE_STR (VK_FORMAT_R8G8_USCALED);
			CASE_STR (VK_FORMAT_R8G8_SSCALED);
			CASE_STR (VK_FORMAT_R8G8_UINT);
			CASE_STR (VK_FORMAT_R8G8_SINT);
			CASE_STR (VK_FORMAT_R8G8_SRGB);
			CASE_STR (VK_FORMAT_R8G8B8_UNORM);
			CASE_STR (VK_FORMAT_R8G8B8_SNORM);
			CASE_STR (VK_FORMAT_R8G8B8_USCALED);
			CASE_STR (VK_FORMAT_R8G8B8_SSCALED);
			CASE_STR (VK_FORMAT_R8G8B8_UINT);
			CASE_STR (VK_FORMAT_R8G8B8_SINT);
			CASE_STR (VK_FORMAT_R8G8B8_SRGB);
			CASE_STR (VK_FORMAT_B8G8R8_UNORM);
			CASE_STR (VK_FORMAT_B8G8R8_SNORM);
			CASE_STR (VK_FORMAT_B8G8R8_USCALED);
			CASE_STR (VK_FORMAT_B8G8R8_SSCALED);
			CASE_STR (VK_FORMAT_B8G8R8_UINT);
			CASE_STR (VK_FORMAT_B8G8R8_SINT);
			CASE_STR (VK_FORMAT_B8G8R8_SRGB);
			CASE_STR (VK_FORMAT_R8G8B8A8_UNORM);
			CASE_STR (VK_FORMAT_R8G8B8A8_SNORM);
			CASE_STR (VK_FORMAT_R8G8B8A8_USCALED);
			CASE_STR (VK_FORMAT_R8G8B8A8_SSCALED);
			CASE_STR (VK_FORMAT_R8G8B8A8_UINT);
			CASE_STR (VK_FORMAT_R8G8B8A8_SINT);
			CASE_STR (VK_FORMAT_R8G8B8A8_SRGB);
			CASE_STR (VK_FORMAT_B8G8R8A8_UNORM);
			CASE_STR (VK_FORMAT_B8G8R8A8_SNORM);
			CASE_STR (VK_FORMAT_B8G8R8A8_USCALED);
			CASE_STR (VK_FORMAT_B8G8R8A8_SSCALED);
			CASE_STR (VK_FORMAT_B8G8R8A8_UINT);
			CASE_STR (VK_FORMAT_B8G8R8A8_SINT);
			CASE_STR (VK_FORMAT_B8G8R8A8_SRGB);
			CASE_STR (VK_FORMAT_A8B8G8R8_UNORM_PACK32);
			CASE_STR (VK_FORMAT_A8B8G8R8_SNORM_PACK32);
			CASE_STR (VK_FORMAT_A8B8G8R8_USCALED_PACK32);
			CASE_STR (VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
			CASE_STR (VK_FORMAT_A8B8G8R8_UINT_PACK32);
			CASE_STR (VK_FORMAT_A8B8G8R8_SINT_PACK32);
			CASE_STR (VK_FORMAT_A8B8G8R8_SRGB_PACK32);
			CASE_STR (VK_FORMAT_A2R10G10B10_UNORM_PACK32);
			CASE_STR (VK_FORMAT_A2R10G10B10_SNORM_PACK32);
			CASE_STR (VK_FORMAT_A2R10G10B10_USCALED_PACK32);
			CASE_STR (VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
			CASE_STR (VK_FORMAT_A2R10G10B10_UINT_PACK32);
			CASE_STR (VK_FORMAT_A2R10G10B10_SINT_PACK32);
			CASE_STR (VK_FORMAT_A2B10G10R10_UNORM_PACK32);
			CASE_STR (VK_FORMAT_A2B10G10R10_SNORM_PACK32);
			CASE_STR (VK_FORMAT_A2B10G10R10_USCALED_PACK32);
			CASE_STR (VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
			CASE_STR (VK_FORMAT_A2B10G10R10_UINT_PACK32);
			CASE_STR (VK_FORMAT_A2B10G10R10_SINT_PACK32);
			CASE_STR (VK_FORMAT_R16_UNORM);
			CASE_STR (VK_FORMAT_R16_SNORM);
			CASE_STR (VK_FORMAT_R16_USCALED);
			CASE_STR (VK_FORMAT_R16_SSCALED);
			CASE_STR (VK_FORMAT_R16_UINT);
			CASE_STR (VK_FORMAT_R16_SINT);
			CASE_STR (VK_FORMAT_R16_SFLOAT);
			CASE_STR (VK_FORMAT_R16G16_UNORM);
			CASE_STR (VK_FORMAT_R16G16_SNORM);
			CASE_STR (VK_FORMAT_R16G16_USCALED);
			CASE_STR (VK_FORMAT_R16G16_SSCALED);
			CASE_STR (VK_FORMAT_R16G16_UINT);
			CASE_STR (VK_FORMAT_R16G16_SINT);
			CASE_STR (VK_FORMAT_R16G16_SFLOAT);
			CASE_STR (VK_FORMAT_R16G16B16_UNORM);
			CASE_STR (VK_FORMAT_R16G16B16_SNORM);
			CASE_STR (VK_FORMAT_R16G16B16_USCALED);
			CASE_STR (VK_FORMAT_R16G16B16_SSCALED);
			CASE_STR (VK_FORMAT_R16G16B16_UINT);
			CASE_STR (VK_FORMAT_R16G16B16_SINT);
			CASE_STR (VK_FORMAT_R16G16B16_SFLOAT);
			CASE_STR (VK_FORMAT_R16G16B16A16_UNORM);
			CASE_STR (VK_FORMAT_R16G16B16A16_SNORM);
			CASE_STR (VK_FORMAT_R16G16B16A16_USCALED);
			CASE_STR (VK_FORMAT_R16G16B16A16_SSCALED);
			CASE_STR (VK_FORMAT_R16G16B16A16_UINT);
			CASE_STR (VK_FORMAT_R16G16B16A16_SINT);
			CASE_STR (VK_FORMAT_R16G16B16A16_SFLOAT);
			CASE_STR (VK_FORMAT_R32_UINT);
			CASE_STR (VK_FORMAT_R32_SINT);
			CASE_STR (VK_FORMAT_R32_SFLOAT);
			CASE_STR (VK_FORMAT_R32G32_UINT);
			CASE_STR (VK_FORMAT_R32G32_SINT);
			CASE_STR (VK_FORMAT_R32G32_SFLOAT);
			CASE_STR (VK_FORMAT_R32G32B32_UINT);
			CASE_STR (VK_FORMAT_R32G32B32_SINT);
			CASE_STR (VK_FORMAT_R32G32B32_SFLOAT);
			CASE_STR (VK_FORMAT_R32G32B32A32_UINT);
			CASE_STR (VK_FORMAT_R32G32B32A32_SINT);
			CASE_STR (VK_FORMAT_R32G32B32A32_SFLOAT);
			CASE_STR (VK_FORMAT_R64_UINT);
			CASE_STR (VK_FORMAT_R64_SINT);
			CASE_STR (VK_FORMAT_R64_SFLOAT);
			CASE_STR (VK_FORMAT_R64G64_UINT);
			CASE_STR (VK_FORMAT_R64G64_SINT);
			CASE_STR (VK_FORMAT_R64G64_SFLOAT);
			CASE_STR (VK_FORMAT_R64G64B64_UINT);
			CASE_STR (VK_FORMAT_R64G64B64_SINT);
			CASE_STR (VK_FORMAT_R64G64B64_SFLOAT);
			CASE_STR (VK_FORMAT_R64G64B64A64_UINT);
			CASE_STR (VK_FORMAT_R64G64B64A64_SINT);
			CASE_STR (VK_FORMAT_R64G64B64A64_SFLOAT);
			CASE_STR (VK_FORMAT_B10G11R11_UFLOAT_PACK32);
			CASE_STR (VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
			CASE_STR (VK_FORMAT_D16_UNORM);
			CASE_STR (VK_FORMAT_X8_D24_UNORM_PACK32);
			CASE_STR (VK_FORMAT_D32_SFLOAT);
			CASE_STR (VK_FORMAT_S8_UINT);
			CASE_STR (VK_FORMAT_D16_UNORM_S8_UINT);
			CASE_STR (VK_FORMAT_D24_UNORM_S8_UINT);
			CASE_STR (VK_FORMAT_D32_SFLOAT_S8_UINT);
			CASE_STR (VK_FORMAT_BC1_RGB_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC1_RGB_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_BC1_RGBA_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC1_RGBA_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_BC2_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC2_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_BC3_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC3_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_BC4_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC4_SNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC5_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC5_SNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC6H_UFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_BC6H_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_BC7_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_BC7_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_EAC_R11_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_EAC_R11_SNORM_BLOCK);
			CASE_STR (VK_FORMAT_EAC_R11G11_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_EAC_R11G11_SNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_4x4_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_4x4_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_5x4_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_5x4_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_5x5_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_5x5_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_6x5_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_6x5_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_6x6_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_6x6_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x5_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x5_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x6_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x6_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x8_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x8_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x5_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x5_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x6_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x6_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x8_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x8_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x10_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x10_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_12x10_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_12x10_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_12x12_UNORM_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_12x12_SRGB_BLOCK);
			CASE_STR (VK_FORMAT_G8B8G8R8_422_UNORM);
			CASE_STR (VK_FORMAT_B8G8R8G8_422_UNORM);
			CASE_STR (VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM);
			CASE_STR (VK_FORMAT_G8_B8R8_2PLANE_420_UNORM);
			CASE_STR (VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM);
			CASE_STR (VK_FORMAT_G8_B8R8_2PLANE_422_UNORM);
			CASE_STR (VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM);
			CASE_STR (VK_FORMAT_R10X6_UNORM_PACK16);
			CASE_STR (VK_FORMAT_R10X6G10X6_UNORM_2PACK16);
			CASE_STR (VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16);
			CASE_STR (VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
			CASE_STR (VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
			CASE_STR (VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_R12X4_UNORM_PACK16);
			CASE_STR (VK_FORMAT_R12X4G12X4_UNORM_2PACK16);
			CASE_STR (VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16);
			CASE_STR (VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
			CASE_STR (VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
			CASE_STR (VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G16B16G16R16_422_UNORM);
			CASE_STR (VK_FORMAT_B16G16R16G16_422_UNORM);
			CASE_STR (VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM);
			CASE_STR (VK_FORMAT_G16_B16R16_2PLANE_420_UNORM);
			CASE_STR (VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM);
			CASE_STR (VK_FORMAT_G16_B16R16_2PLANE_422_UNORM);
			CASE_STR (VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM);
			CASE_STR (VK_FORMAT_G8_B8R8_2PLANE_444_UNORM);
			CASE_STR (VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16);
			CASE_STR (VK_FORMAT_G16_B16R16_2PLANE_444_UNORM);
			CASE_STR (VK_FORMAT_A4R4G4B4_UNORM_PACK16);
			CASE_STR (VK_FORMAT_A4B4G4R4_UNORM_PACK16);
			CASE_STR (VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK);
			CASE_STR (VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG);
			CASE_STR (VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG);
			CASE_STR (VK_FORMAT_R16G16_SFIXED5_NV);
			CASE_STR (VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR);
			CASE_STR (VK_FORMAT_A8_UNORM_KHR);
		default: return "VK_FORMAT_INVALID";
		};
	}

	inline constexpr std::string_view to_str (VkPresentModeKHR present_mode) {
		switch (present_mode) {
			CASE_STR (VK_PRESENT_MODE_IMMEDIATE_KHR);
			CASE_STR (VK_PRESENT_MODE_MAILBOX_KHR);
			CASE_STR (VK_PRESENT_MODE_FIFO_KHR);
			CASE_STR (VK_PRESENT_MODE_FIFO_RELAXED_KHR);
			CASE_STR (VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
			CASE_STR (VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
		default: return "VK_PRESENT_MODE_INVALID";
		};
	}

	inline constexpr std::string_view to_str (VkResult result) {
		switch (result) {
			CASE_STR (VK_SUCCESS);
			CASE_STR (VK_NOT_READY);
			CASE_STR (VK_TIMEOUT);
			CASE_STR (VK_EVENT_SET);
			CASE_STR (VK_EVENT_RESET);
			CASE_STR (VK_INCOMPLETE);
			CASE_STR (VK_ERROR_OUT_OF_HOST_MEMORY);
			CASE_STR (VK_ERROR_OUT_OF_DEVICE_MEMORY);
			CASE_STR (VK_ERROR_INITIALIZATION_FAILED);
			CASE_STR (VK_ERROR_DEVICE_LOST);
			CASE_STR (VK_ERROR_MEMORY_MAP_FAILED);
			CASE_STR (VK_ERROR_LAYER_NOT_PRESENT);
			CASE_STR (VK_ERROR_EXTENSION_NOT_PRESENT);
			CASE_STR (VK_ERROR_FEATURE_NOT_PRESENT);
			CASE_STR (VK_ERROR_INCOMPATIBLE_DRIVER);
			CASE_STR (VK_ERROR_TOO_MANY_OBJECTS);
			CASE_STR (VK_ERROR_FORMAT_NOT_SUPPORTED);
			CASE_STR (VK_ERROR_FRAGMENTED_POOL);
			CASE_STR (VK_ERROR_UNKNOWN);
			CASE_STR (VK_ERROR_OUT_OF_POOL_MEMORY);
			CASE_STR (VK_ERROR_INVALID_EXTERNAL_HANDLE);
			CASE_STR (VK_ERROR_FRAGMENTATION);
			CASE_STR (VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
			CASE_STR (VK_PIPELINE_COMPILE_REQUIRED);
			CASE_STR (VK_ERROR_SURFACE_LOST_KHR);
			CASE_STR (VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
			CASE_STR (VK_SUBOPTIMAL_KHR);
			CASE_STR (VK_ERROR_OUT_OF_DATE_KHR);
			CASE_STR (VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
			CASE_STR (VK_ERROR_VALIDATION_FAILED_EXT);
			CASE_STR (VK_ERROR_INVALID_SHADER_NV);
			CASE_STR (VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR);
			CASE_STR (VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR);
			CASE_STR (VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR);
			CASE_STR (VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR);
			CASE_STR (VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR);
			CASE_STR (VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR);
			CASE_STR (VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
			CASE_STR (VK_ERROR_NOT_PERMITTED_KHR);
			CASE_STR (VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
			CASE_STR (VK_THREAD_IDLE_KHR);
			CASE_STR (VK_THREAD_DONE_KHR);
			CASE_STR (VK_OPERATION_DEFERRED_KHR);
			CASE_STR (VK_OPERATION_NOT_DEFERRED_KHR);
			CASE_STR (VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR);
			CASE_STR (VK_ERROR_COMPRESSION_EXHAUSTED_EXT);
			CASE_STR (VK_INCOMPATIBLE_SHADER_BINARY_EXT);
		default: return "VK_RESULT_INVALID";
		};
	};

#undef CASE_STR
} // namespace vkh

export namespace vkh
{
	u32 find_memory_type(const VkPhysicalDeviceMemoryProperties& memory_properties, u32 memory_type_bits, VkMemoryPropertyFlags memory_properties_flags) {
		for (u32 i = 0; i < memory_properties.memoryTypeCount; ++i) {
			if ((memory_type_bits & (1 << i)) && (memory_properties.memoryTypes[i].propertyFlags & memory_properties_flags) == memory_properties_flags) {
				return i;
			}
		}
		throw std::runtime_error("Failed to find suitable memory type");
	}
}

// sourced from 'https://github.dev/KhronosGroup/Vulkan-Samples/' -
// 'framework/common/error.h'
export namespace vkh
{
	inline constexpr void VkCheck (VkResult result, std::source_location location = std::source_location::current()) {
		if (result != VK_SUCCESS) {
			throw std::runtime_error (std::format ("Vulkan error: {} in {}[{}:{}:{}]",
												   vkh::to_str (result),
												   location.function_name(),
												   location.file_name(),
												   location.line(),
												   location.column()));
		}
	}

	inline constexpr void VkCheck (VkResult result, std::string_view message, std::source_location location = std::source_location::current()) {
		if (result != VK_SUCCESS) {
			throw std::runtime_error (std::format ("Vulkan error: {} - {} in {}[{}:{}:{}]",
												   vkh::to_str (result),
												   message,
												   location.function_name(),
												   location.file_name(),
												   location.line(),
												   location.column()));
		}
	}

	inline constexpr void AssertVkHandle (void* handle, std::source_location location = std::source_location::current()) {
		if (handle == VK_NULL_HANDLE) {
			throw std::runtime_error (std::format ("Vulkan error: VK_NULL_HANDLE in {}[{}:{}:{}]",
												   location.function_name(),
												   location.file_name(),
												   location.line(),
												   location.column()));
		}
	}

	inline constexpr void AssertVkHandle (void* handle, std::string_view message, std::source_location location = std::source_location::current()) {
		if (handle == VK_NULL_HANDLE) {
			throw std::runtime_error (std::format ("Vulkan error: VK_NULL_HANDLE - {} in {}[{}:{}:{}]",
												   message,
												   location.function_name(),
												   location.file_name(),
												   location.line(),
												   location.column()));
		}
	}
}